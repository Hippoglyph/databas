--Give the total revenue generated by employees per city. List from greatest revenue to least revenue. List city names with the total per city. Note selling 100 units mean that revenue is unitPrice * 100.

SELECT city, SUM(unitprice*quantity) as revenue
FROM orders
NATURAL JOIN orderDetails NATURAL JOIN employees
GROUP BY city
ORDER BY revenue DESC;

--List the product names and the number of units sold of them for all orders. If there have been no orders, list the total as zero.

SELECT productname,
		CASE
			WHEN unitSold IS NOT NULL THEN unitSold
			ELSE 0
		END as unitSold
FROM
(
	SELECT productid, sum(quantity) as unitSold
	FROM orderDetails
	GROUP BY productid
) as Foo
RIGHT JOIN products
ON products.productid = Foo.productid
ORDER BY unitSold DESC;

--In SQL give the employees that have used every shipper for the orders they processed." Do this using both double not exists and also using aggregation. Discuss which you think is better and why.

SELECT employeeid
FROM (SELECT DISTINCT employeeid, shipvia FROM orders) AS orders
GROUP BY employeeid
HAVING COUNT(shipvia) = (SELECT COUNT(*) FROM shippers);


SELECT DISTINCT employeeid 
FROM employees
WHERE NOT EXISTS(
	SELECT 1
	FROM
	(SELECT DISTINCT employeeid
	FROM 
		(SELECT DISTINCT employeeid FROM employees) AS allEmp
		,
		(SELECT DISTINCT shipperid FROM shippers) AS allShip
	WHERE NOT EXISTS(
					SELECT 1
					FROM orders
					WHERE orders.employeeid = allEmp.employeeid AND orders.shipvia = allShip.shipperid
					)
	) AS Foo
	WHERE Foo.employeeid = employees.employeeid
);
